// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.11.4
// source: hellostream.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ReqData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReqData) Reset() {
	*x = ReqData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hellostream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReqData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReqData) ProtoMessage() {}

func (x *ReqData) ProtoReflect() protoreflect.Message {
	mi := &file_hellostream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReqData.ProtoReflect.Descriptor instead.
func (*ReqData) Descriptor() ([]byte, []int) {
	return file_hellostream_proto_rawDescGZIP(), []int{0}
}

func (x *ReqData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

type RepData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data string `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RepData) Reset() {
	*x = RepData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hellostream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RepData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RepData) ProtoMessage() {}

func (x *RepData) ProtoReflect() protoreflect.Message {
	mi := &file_hellostream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RepData.ProtoReflect.Descriptor instead.
func (*RepData) Descriptor() ([]byte, []int) {
	return file_hellostream_proto_rawDescGZIP(), []int{1}
}

func (x *RepData) GetData() string {
	if x != nil {
		return x.Data
	}
	return ""
}

var File_hellostream_proto protoreflect.FileDescriptor

var file_hellostream_proto_rawDesc = []byte{
	0x0a, 0x11, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x22, 0x1d, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1d, 0x0a, 0x07, 0x52, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0xc6,
	0x01, 0x0a, 0x0b, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x3b,
	0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x52, 0x65, 0x70, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x53,
	0x65, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x14,
	0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x70,
	0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x28, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x71, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x14, 0x2e, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x52, 0x65, 0x70, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x04, 0x5a, 0x02, 0x2e, 0x2f, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hellostream_proto_rawDescOnce sync.Once
	file_hellostream_proto_rawDescData = file_hellostream_proto_rawDesc
)

func file_hellostream_proto_rawDescGZIP() []byte {
	file_hellostream_proto_rawDescOnce.Do(func() {
		file_hellostream_proto_rawDescData = protoimpl.X.CompressGZIP(file_hellostream_proto_rawDescData)
	})
	return file_hellostream_proto_rawDescData
}

var file_hellostream_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_hellostream_proto_goTypes = []interface{}{
	(*ReqData)(nil), // 0: hellostream.ReqData
	(*RepData)(nil), // 1: hellostream.RepData
}
var file_hellostream_proto_depIdxs = []int32{
	0, // 0: hellostream.HelloStream.GetStream:input_type -> hellostream.ReqData
	0, // 1: hellostream.HelloStream.SetStream:input_type -> hellostream.ReqData
	0, // 2: hellostream.HelloStream.AllStream:input_type -> hellostream.ReqData
	1, // 3: hellostream.HelloStream.GetStream:output_type -> hellostream.RepData
	1, // 4: hellostream.HelloStream.SetStream:output_type -> hellostream.RepData
	1, // 5: hellostream.HelloStream.AllStream:output_type -> hellostream.RepData
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_hellostream_proto_init() }
func file_hellostream_proto_init() {
	if File_hellostream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_hellostream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReqData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hellostream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RepData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hellostream_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_hellostream_proto_goTypes,
		DependencyIndexes: file_hellostream_proto_depIdxs,
		MessageInfos:      file_hellostream_proto_msgTypes,
	}.Build()
	File_hellostream_proto = out.File
	file_hellostream_proto_rawDesc = nil
	file_hellostream_proto_goTypes = nil
	file_hellostream_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HelloStreamClient is the client API for HelloStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HelloStreamClient interface {
	GetStream(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (HelloStream_GetStreamClient, error)
	SetStream(ctx context.Context, opts ...grpc.CallOption) (HelloStream_SetStreamClient, error)
	AllStream(ctx context.Context, opts ...grpc.CallOption) (HelloStream_AllStreamClient, error)
}

type helloStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewHelloStreamClient(cc grpc.ClientConnInterface) HelloStreamClient {
	return &helloStreamClient{cc}
}

func (c *helloStreamClient) GetStream(ctx context.Context, in *ReqData, opts ...grpc.CallOption) (HelloStream_GetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloStream_serviceDesc.Streams[0], "/hellostream.HelloStream/GetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamGetStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type HelloStream_GetStreamClient interface {
	Recv() (*RepData, error)
	grpc.ClientStream
}

type helloStreamGetStreamClient struct {
	grpc.ClientStream
}

func (x *helloStreamGetStreamClient) Recv() (*RepData, error) {
	m := new(RepData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloStreamClient) SetStream(ctx context.Context, opts ...grpc.CallOption) (HelloStream_SetStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloStream_serviceDesc.Streams[1], "/hellostream.HelloStream/SetStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamSetStreamClient{stream}
	return x, nil
}

type HelloStream_SetStreamClient interface {
	Send(*ReqData) error
	CloseAndRecv() (*RepData, error)
	grpc.ClientStream
}

type helloStreamSetStreamClient struct {
	grpc.ClientStream
}

func (x *helloStreamSetStreamClient) Send(m *ReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloStreamSetStreamClient) CloseAndRecv() (*RepData, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RepData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *helloStreamClient) AllStream(ctx context.Context, opts ...grpc.CallOption) (HelloStream_AllStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_HelloStream_serviceDesc.Streams[2], "/hellostream.HelloStream/AllStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &helloStreamAllStreamClient{stream}
	return x, nil
}

type HelloStream_AllStreamClient interface {
	Send(*ReqData) error
	Recv() (*RepData, error)
	grpc.ClientStream
}

type helloStreamAllStreamClient struct {
	grpc.ClientStream
}

func (x *helloStreamAllStreamClient) Send(m *ReqData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *helloStreamAllStreamClient) Recv() (*RepData, error) {
	m := new(RepData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// HelloStreamServer is the server API for HelloStream service.
type HelloStreamServer interface {
	GetStream(*ReqData, HelloStream_GetStreamServer) error
	SetStream(HelloStream_SetStreamServer) error
	AllStream(HelloStream_AllStreamServer) error
}

// UnimplementedHelloStreamServer can be embedded to have forward compatible implementations.
type UnimplementedHelloStreamServer struct {
}

func (*UnimplementedHelloStreamServer) GetStream(*ReqData, HelloStream_GetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStream not implemented")
}
func (*UnimplementedHelloStreamServer) SetStream(HelloStream_SetStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method SetStream not implemented")
}
func (*UnimplementedHelloStreamServer) AllStream(HelloStream_AllStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method AllStream not implemented")
}

func RegisterHelloStreamServer(s *grpc.Server, srv HelloStreamServer) {
	s.RegisterService(&_HelloStream_serviceDesc, srv)
}

func _HelloStream_GetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqData)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HelloStreamServer).GetStream(m, &helloStreamGetStreamServer{stream})
}

type HelloStream_GetStreamServer interface {
	Send(*RepData) error
	grpc.ServerStream
}

type helloStreamGetStreamServer struct {
	grpc.ServerStream
}

func (x *helloStreamGetStreamServer) Send(m *RepData) error {
	return x.ServerStream.SendMsg(m)
}

func _HelloStream_SetStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloStreamServer).SetStream(&helloStreamSetStreamServer{stream})
}

type HelloStream_SetStreamServer interface {
	SendAndClose(*RepData) error
	Recv() (*ReqData, error)
	grpc.ServerStream
}

type helloStreamSetStreamServer struct {
	grpc.ServerStream
}

func (x *helloStreamSetStreamServer) SendAndClose(m *RepData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloStreamSetStreamServer) Recv() (*ReqData, error) {
	m := new(ReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _HelloStream_AllStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(HelloStreamServer).AllStream(&helloStreamAllStreamServer{stream})
}

type HelloStream_AllStreamServer interface {
	Send(*RepData) error
	Recv() (*ReqData, error)
	grpc.ServerStream
}

type helloStreamAllStreamServer struct {
	grpc.ServerStream
}

func (x *helloStreamAllStreamServer) Send(m *RepData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *helloStreamAllStreamServer) Recv() (*ReqData, error) {
	m := new(ReqData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _HelloStream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hellostream.HelloStream",
	HandlerType: (*HelloStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStream",
			Handler:       _HelloStream_GetStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SetStream",
			Handler:       _HelloStream_SetStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "AllStream",
			Handler:       _HelloStream_AllStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "hellostream.proto",
}
